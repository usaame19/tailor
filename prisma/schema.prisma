generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           UserRole      @default(employee)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  password       String
  failedAttempts Int           @default(0) // Track failed attempts
  lockoutUntil   DateTime? // Lockout expiry time
  phoneNumber    String?       @unique
  sells          Sell[]
  transaction    Transaction[]
  bankAccount    BankAccount[] // Relation to BankAccount model
  accountSwaps   AccountSwap[]
  tailorOrders   TailorOrder[] // Relation to TailorOrder model
}


model Customer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  customerSize CustomerSize[]
  tailorOrders TailorOrder[] // Relation to TailorOrder model
}

model CustomerSize {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String   @db.ObjectId
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  // Tailor-specific customer size fields
  neck        Float? // Neck circumference in inches
  chest       Float? // Chest circumference in inches
  waist       Float? // Waist circumference in inches
  hip         Float? // Hip circumference in inches
  shoulder    Float? // Shoulder width in inches
  sleeve      Float? // Sleeve length in inches
  inseam      Float? // Inseam length in inches
  outseam     Float? // Outseam length in inches
  height      Float? // Customer height in inches
  weight      Float? // Customer weight in kg
  active      Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] // Relation to products in this category
}

model Product {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  categoryId      String          @db.ObjectId
  category        Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  price           Float
  description     String
  stockQuantity   Int
  variants        Variant[] // Relation to product variants
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  orderItem       SellItem[]
  stockQuantities StockQuantity[]
}

model StockQuantity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String   @db.ObjectId
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  skuId     String   @db.ObjectId
  sku       SKU      @relation(fields: [skuId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variant {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  productId     String          @db.ObjectId
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  color         String
  skus          SKU[] // Relation to SKUs within this variant
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  stockQuantity StockQuantity[]
}

model SKU {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  variantId       String          @db.ObjectId
  variant         Variant         @relation(fields: [variantId], references: [id], onDelete: Cascade)
  size            String
  sku             String          @unique
  stockQuantity   Int // Stock quantity specific to this SKU
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  sellItem        SellItem[]
  stockQuantities StockQuantity[]
}

model SellItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sellId    String   @db.ObjectId
  sell      Sell     @relation(fields: [sellId], references: [id], onDelete: Cascade)
  skuId     String   @db.ObjectId
  sku       SKU      @relation(fields: [skuId], references: [id], onDelete: Cascade)
  price     Float
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Sell {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String?    @unique // Unique order identifier (e.g., ORD-0001)
  userId        String     @db.ObjectId
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         SellItem[]
  total         Float
  type          Type
  cashAmount    Float?
  digitalAmount Float?
  status        String     @default("pending")
  discount      Float
  // customerId    String?    @db.ObjectId
  // customer      Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  accountId     String     @db.ObjectId // New field to link to Accounts
  account       Accounts   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum Type {
  cash
  digital
  both
}


model Accounts {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  account         String // This field represents the account type (e.g., "KES", "USD")
  balance         Float // This field holds the balance of the account
  cashBalance     Float // This field holds the balance of the account
  default         Boolean           @default(false) // This field holds the balance of the account
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  transactions    Transaction[]
  sells           Sell[] // New relation to Sell model
  fromAccountSwap AccountSwap[]     @relation("FromAccountSwap")
  toAccountSwap   AccountSwap[]     @relation("ToAccountSwap")
  bankTransaction BankTransaction[] // New relation to BankAccount model
  tailorOrders    TailorOrder[] // Relation to TailorOrder model
}

model TransactionCategory {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @unique // Category name (e.g., rent, salary)
  description  String? // Optional description of the category
  isAdmin      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] // Relation to transactions using this category
}

model Transaction {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  userId        String              @db.ObjectId
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  details       String
  amount        Float
  amountType    String
  type          TransactionType?    @default(cash)
  accountId     String              @db.ObjectId
  account       Accounts            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  acc           String?
  tranDate      DateTime
  ref           String
  categoryId    String              @db.ObjectId
  category      TransactionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  // New fields for managing exchange transactions
  isExchange    Boolean?            @default(false) // Whether this is an exchange transaction
  exchangeType  exchangeType?       @default(withdrawal)
  fromType      TransactionType? // The type being converted from (cash or digital)
  phone         String? // Phone number for the transaction 
  toType        TransactionType? // The type being converted to (cash or digital)
  // New fields for storing sender/receiver details
  senderName    String? // Name of the person sending the money
  senderPhone   String? // Phone number of the sender
  receiverName  String? // Name of the person receiving the money
  receiverPhone String? // Phone number of the receiver
}

enum exchangeType {
  withdrawal
  deposit
}

// Enum to define Transaction Type
enum TransactionType {
  cash
  digital
}

// Enum to define user roles
enum UserRole {
  admin
  employee
  viewer
  superAdmin
}

// bank Accounts

model BankAccount {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String // Name of the debt taker
  accountNumber  String            @unique // Number of the bank account
  userId         String?           @db.ObjectId
  user           User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cashBalance    Float             @default(0.0) // Balance for cash debts
  digitalBalance Float             @default(0.0) // Balance for digital debts
  totalBalance   Float             @default(0.0) // Combined balance (cash + digital)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  transactions   BankTransaction[] // All debts related to this bank account
}

// bank Transactions

model BankTransaction {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  bankAccountId  String      @db.ObjectId
  bankAccount    BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  accountId      String      @db.ObjectId
  account        Accounts    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  details        String? // Details of the transaction
  cashBalance    Float       @default(0.0) // Balance for cash debts
  digitalBalance Float       @default(0.0) // Balance for digital debts
  amount         Float // Amount of the transaction
  acc            AccType // Type of the transaction (cash or digital)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum AccType {
  cr
  dr
}

// Account Swap model for the account swapping feature of the account 
model AccountSwap {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  swapId        String   @unique
  fromAccountId String   @db.ObjectId
  fromAccount   Accounts @relation("FromAccountSwap", fields: [fromAccountId], references: [id], onDelete: Cascade)
  toAccountId   String   @db.ObjectId
  toAccount     Accounts @relation("ToAccountSwap", fields: [toAccountId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Amount in the source currency
  fromAmount Float // e.g., 10,000 KES

  fromCashAmount    Float? // e.g., 100KES cash
  fromDigitalAmount Float? // e.g., 4500KES digital
  // Amount in the target currency
  toAmount          Float // e.g., 90 USD

  // Exchange rate used for the conversion
  exchangeRate Float? // e.g., 1 USD = 111.11 KES

  // Split of the target amount into cash and digital
  toCashAmount    Float? // e.g., $45 cash
  toDigitalAmount Float? // e.g., $45 digital

  details   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tailor Order model for managing custom tailoring orders
model TailorOrder {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber String        @unique // Unique order identifier (e.g., TO-0001)
  customerId  String        @db.ObjectId
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Order details
  orderType   TailorOrderType // Type of garment (jacket, qamis, trouser, shirt)
  status      TailorOrderStatus @default(pending)
  
  // Pricing
  totalPrice  Float
  paidAmount  Float         @default(0)
  balance     Float         // Calculated field: totalPrice - paidAmount
  
  // Payment details
  paymentType PaymentType?  @default(cash)
  accountId   String?       @db.ObjectId
  account     Accounts?     @relation(fields: [accountId], references: [id], onDelete: SetNull)
  
  // Order specifications
  specifications TailorSpecification[]
  
  // Additional details
  notes       String?
  deliveryDate DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Tailor specifications for different garment types
model TailorSpecification {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  tailorOrderId String      @db.ObjectId
  tailorOrder   TailorOrder @relation(fields: [tailorOrderId], references: [id], onDelete: Cascade)
  
  // Common measurements (in inches)
  shoulder      Float? // Shoulder width
  chest         Float? // Chest circumference
  waist         Float? // Waist circumference
  length        Float? // Length measurement
  sleeves        Float? // Sleeve length
  neck          Float? // Neck circumference
  
  // Trouser-specific measurements
  hips          Float? // Hip circumference
  thigh         Float? // Thigh circumference
  bottom        Float? // Bottom width
  
  // Additional custom measurements
  customMeasurements String? // JSON string for any additional measurements
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// Enum for tailor order types
enum TailorOrderType {
  jacket
  qamis
  trouser
  shirt
}

// Enum for tailor order status
enum TailorOrderStatus {
  pending
  in_progress
  completed
  delivered
  cancelled
}

// Enum for payment types
enum PaymentType {
  cash
  digital
  both
}